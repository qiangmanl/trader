from datetime import timedelta
import pandas as pd

df1 = pd.DataFrame({'a': [1, 2], 'b': [3, 4]})
df2 = pd.DataFrame({'a': [5, 6], 'b': [7, 8]})
df3 = pd.DataFrame({'a': [4, 6], 'b': [71, 8]})
# 使用 concat 函数按列合并两个数据框，并保留组名
result = pd.concat([df1, df2], axis=1)

# 打印合并后的结果
print(result)



import pandas as pd
# 假设你有三个股票的数据，每个股票有'close'和'open'两列
stock1_data = {'close': [10, 11, 12], 'open': [9, 10, 11]}
stock2_data = {'close': [20, 21, 22], 'open': [19, 20, 21]}
stock3_data = {'close': [30, 31, 32], 'open': [29, 30, 31]}

# 创建三个DataFrame
df_stock1 = pd.DataFrame(stock1_data, columns=['close', 'open'])
df_stock2 = pd.DataFrame(stock2_data, columns=['close', 'open'])
df_stock3 = pd.DataFrame(stock3_data, columns=['close', 'open'])

# 合并三个DataFrame，并使用MultiIndex创建多级列
df = pd.concat([df_stock1, df_stock2, df_stock3], axis=1, keys=['stock1', 'stock2', 'stock3'])

# 打印结果
print(df)

import pandas as pd
# 假设你有三个股票的数据，每个股票有'close'和'open'两列
stock1_data = {'close': [10, 11, 12], 'open': [9, 10, 11]}
stock2_data = {'close': [20, 21, 22], 'open': [19, 20, 21]}
stock3_data = {'close': [30, 31, 32], 'open': [29, 30, 31]}

# 创建三个DataFrame
df_stock1 = pd.DataFrame(stock1_data, columns=['close', 'open'])
df_stock2 = pd.DataFrame(stock2_data, columns=['close', 'open'])
df_stock3 = pd.DataFrame(stock3_data, columns=['close', 'open'])

# 合并三个DataFrame，并使用MultiIndex创建多级列
df = pd.concat([df_stock1, df_stock2, df_stock3], axis=1, keys=['stock1', 'stock2', 'stock3'])

# 打印结果
print(df)


df_stock1 = pd.DataFrame({'price': [0], 'qty': [0], 'balance': [0]}, columns=['price', 'qty', 'balance'])
{'price': [0], 'qty': [0], 'balance': [0]}
['price', 'qty', 'balance']


class A:
    @classmethod
    def defx(cls,x):
        cls.x = x
        return cls
    
    @classmethod
    @property
    def addx(cls):
        cls.x += 1
        return cls.x

x1 = A.f(1)
x2 = A.f(2)
id(x1) == id(x2)

class B:
    def defx(self,x) -> None:
        self.x = x
        return self

b = B().defx(1)




import pandas as pd
index = pd.date_range(start="2023-05-10",end="2023-10-10",freq="5T")

x = index[0].date()



# index = pd.date_range(start="2023-05-10",end="2023-10-10",freq="5T")
window =10
x = 0
# l =  list(range(100))
# while l !=[]:
#     x +=1 
#     if x == window *2:
#         d = l[:x]
#         l = l[x:]
#         print(d)
#         x = 0

index = pd.date_range(start="2023-05-10",end="2023-10-10",freq="5T")
while len(index) !=0:
    x +=1 
    if x == window *2:
        d = index[:x]
        index =index[x:]
        print(d)
        x = 0

# date to str
# df .index = df.index.astype("str")
# df to_numpy  to_dict to_json    


data_list = [
    {"2023-01-01": [20.07, 0.0, None, 0.0, None, 10000.0]},
    {"2023-01-02": [20.07, 0.0, None, 0.0, None, 10000.0]}
]

data_list = [
    {"2023-01-01": [20.07, 0.0, None, 0.0, None, 10000.0]},
    {"2023-01-02": [20.07, 0.0, None, 0.0, None, 10000.0]}
]
from numpy import nan
data = [[ 2.00700000e+01,  0.00000000e+00,             nan,
         0.00000000e+00,             nan,  1.00000000e+04],
       [ 1.99700000e+01,  0.00000000e+00,             nan,
         0.00000000e+00,             nan,  1.00000000e+04],
       [ 1.99000000e+01,  1.00000000e+00, -8.51276915e-03,
         0.00000000e+00,             nan,  9.99987009e+03]]

df = pd.DataFrame()
df.from_records(data)
df = pd.DataFrame.from_records(data,columns=["a","b","c","d","e","f"])



getattr(strategy, symbol).orderbook.T.to_dict(orient='list')


{'2021-02-19 09:35:00': [19.38, 19.44, 19.2, 19.39, 268900.0], '2021-02-19 09:40:00': [19.39, 19.45, 19.36, 19.4, 152100.0], '2021-02-19 09:45:00': [19.38, 19.47, 19.33, 19.46, 148400.0], '2021-02-19 09:50:00': [19.45, 19.57, 19.43, 19.53, 279000.0], '2021-02-19 09:55:00': [19.53, 19.63, 19.49, 19.56, 163900.0], '2021-02-19 10:00:00': [19.55, 19.6, 19.48, 19.5, 179900.0], '2021-02-19 10:05:00': [19.5, 19.59, 19.48, 19.56, 132800.0], '2021-02-19 10:10:00': [19.56, 19.64, 19.54, 19.6, 203000.0], '2021-02-19 10:15:00': [19.6, 19.6, 19.56, 19.58, 107200.0], '2021-02-19 10:20:00': [19.58, 19.73, 19.58, 19.61, 234800.0], '2021-02-19 10:25:00': [19.62, 19.71, 19.62, 19.7, 113700.0], '2021-02-19 10:30:00': [19.7, 19.75, 19.66, 19.68, 147900.0], '2021-02-19 10:35:00': [19.68, 19.7, 19.66, 19.66, 94000.0], '2021-02-19 10:40:00': [19.65, 19.65, 19.52, 19.55, 85200.0], '2021-02-19 10:45:00': [19.55, 19.61, 19.5, 19.52, 103800.0], '2021-02-19 10:50:00': [19.51, 19.58, 19.5, 19.55, 101600.0], '2021-02-19 10:55:00': [19.51, 19.55, 19.43, 19.45, 117000.0], '2021-02-19 11:00:00': [19.45, 19.51, 19.43, 19.5, 107400.0], '2021-02-19 11:05:00': [19.48, 19.56, 19.48, 19.56, 44500.0], '2021-02-19 11:10:00': [19.56, 19.59, 19.52, 19.56, 39300.0], '2021-02-19 11:15:00': [19.56, 19.58, 19.52, 19.58, 22200.0], '2021-02-19 11:20:00': [19.57, 19.61, 19.54, 19.6, 34500.0], '2021-02-19 11:25:00': [19.61, 19.65, 19.58, 19.61, 76000.0], '2021-02-19 11:30:00': [19.62, 19.63, 19.59, 19.61, 27100.0], '2021-02-19 13:05:00': [19.59, 19.67, 19.59, 19.67, 83100.0], '2021-02-19 13:10:00': [19.67, 19.67, 19.55, 19.55, 82800.0], '2021-02-19 13:15:00': [19.56, 19.6, 19.55, 19.56, 49900.0], '2021-02-19 13:20:00': [19.56, 19.65, 19.54, 19.61, 25100.0], '2021-02-19 13:25:00': [19.61, 19.67, 19.59, 19.67, 47100.0], '2021-02-19 13:30:00': [19.67, 19.67, 19.62, 19.66, 35800.0], '2021-02-19 13:35:00': [19.67, 19.71, 19.63, 19.65, 84600.0], '2021-02-19 13:40:00': [19.66, 19.71, 19.65, 19.7, 63900.0], '2021-02-19 13:45:00': [19.68, 19.8, 19.67, 19.79, 263100.0], '2021-02-19 13:50:00': [19.79, 19.79, 19.72, 19.72, 110300.0], '2021-02-19 13:55:00': [19.72, 19.77, 19.72, 19.75, 89900.0], '2021-02-19 14:00:00': [19.77, 19.77, 19.69, 19.7, 225500.0], '2021-02-19 14:05:00': [19.7, 19.7, 19.66, 19.67, 72400.0], '2021-02-19 14:10:00': [19.67, 19.76, 19.67, 19.76, 124900.0], '2021-02-19 14:15:00': [19.77, 19.83, 19.76, 19.8, 90600.0], '2021-02-19 14:20:00': [19.8, 19.85, 19.79, 19.8, 86600.0], '2021-02-19 14:25:00': [19.8, 19.91, 19.8, 19.89, 135800.0], '2021-02-19 14:30:00': [19.88, 19.95, 19.86, 19.88, 194300.0], '2021-02-19 14:35:00': [19.88, 19.9, 19.82, 19.9, 60300.0], '2021-02-19 14:40:00': [19.87, 19.93, 19.84, 19.9, 72400.0], '2021-02-19 14:45:00': [19.91, 19.93, 19.84, 19.88, 55100.0], '2021-02-19 14:50:00': [19.9, 19.92, 19.86, 19.9, 66400.0], '2021-02-19 14:55:00': [19.9, 19.93, 19.87, 19.9, 145400.0], '2021-02-19 15:00:00': [19.89, 19.92, 19.86, 19.9, 108700.0]}

df = pd.DataFrame(columns=["a","b","c","d","e"])

x,y  = d.popitem()

df.loc[x] = y 

d= {}
def f(d): 
    l = []
    
    for i in range(100):
        d["a"] = "asdadsssssssssssawewdweddfsfcasdasdsd"
        l.append(d.popitem()) 
    return l 


d1 = [{'2021-02-19 09:35:00': [19.38, 19.44, 19.2, 19.39, 268900.0], '2021-02-19 09:40:00': [19.39, 19.45, 19.36, 19.4, 152100.0], '2021-02-19 09:45:00': [19.38, 19.47, 19.33, 19.46, 148400.0], '2021-02-19 09:50:00': [19.45, 19.57, 19.43, 19.53, 279000.0], '2021-02-19 09:55:00': [19.53, 19.63, 19.49, 19.56, 163900.0], '2021-02-19 10:00:00': [19.55, 19.6, 19.48, 19.5, 179900.0], '2021-02-19 10:05:00': [19.5, 19.59, 19.48, 19.56, 132800.0], '2021-02-19 10:10:00': [19.56, 19.64, 19.54, 19.6, 203000.0], '2021-02-19 10:15:00': [19.6, 19.6, 19.56, 19.58, 107200.0], '2021-02-19 10:20:00': [19.58, 19.73, 19.58, 19.61, 234800.0], '2021-02-19 10:25:00': [19.62, 19.71, 19.62, 19.7, 113700.0], '2021-02-19 10:30:00': [19.7, 19.75, 19.66, 19.68, 147900.0], '2021-02-19 10:35:00': [19.68, 19.7, 19.66, 19.66, 94000.0], '2021-02-19 10:40:00': [19.65, 19.65, 19.52, 19.55, 85200.0], '2021-02-19 10:45:00': [19.55, 19.61, 19.5, 19.52, 103800.0], '2021-02-19 10:50:00': [19.51, 19.58, 19.5, 19.55, 101600.0], '2021-02-19 10:55:00': [19.51, 19.55, 19.43, 19.45, 117000.0], '2021-02-19 11:00:00': [19.45, 19.51, 19.43, 19.5, 107400.0], '2021-02-19 11:05:00': [19.48, 19.56, 19.48, 19.56, 44500.0], '2021-02-19 11:10:00': [19.56, 19.59, 19.52, 19.56, 39300.0], '2021-02-19 11:15:00': [19.56, 19.58, 19.52, 19.58, 22200.0], '2021-02-19 11:20:00': [19.57, 19.61, 19.54, 19.6, 34500.0], '2021-02-19 11:25:00': [19.61, 19.65, 19.58, 19.61, 76000.0], '2021-02-19 11:30:00': [19.62, 19.63, 19.59, 19.61, 27100.0], '2021-02-19 13:05:00': [19.59, 19.67, 19.59, 19.67, 83100.0], '2021-02-19 13:10:00': [19.67, 19.67, 19.55, 19.55, 82800.0], '2021-02-19 13:15:00': [19.56, 19.6, 19.55, 19.56, 49900.0], '2021-02-19 13:20:00': [19.56, 19.65, 19.54, 19.61, 25100.0], '2021-02-19 13:25:00': [19.61, 19.67, 19.59, 19.67, 47100.0], '2021-02-19 13:30:00': [19.67, 19.67, 19.62, 19.66, 35800.0], '2021-02-19 13:35:00': [19.67, 19.71, 19.63, 19.65, 84600.0], '2021-02-19 13:40:00': [19.66, 19.71, 19.65, 19.7, 63900.0], '2021-02-19 13:45:00': [19.68, 19.8, 19.67, 19.79, 263100.0], '2021-02-19 13:50:00': [19.79, 19.79, 19.72, 19.72, 110300.0], '2021-02-19 13:55:00': [19.72, 19.77, 19.72, 19.75, 89900.0], '2021-02-19 14:00:00': [19.77, 19.77, 19.69, 19.7, 225500.0], '2021-02-19 14:05:00': [19.7, 19.7, 19.66, 19.67, 72400.0], '2021-02-19 14:10:00': [19.67, 19.76, 19.67, 19.76, 124900.0], '2021-02-19 14:15:00': [19.77, 19.83, 19.76, 19.8, 90600.0], '2021-02-19 14:20:00': [19.8, 19.85, 19.79, 19.8, 86600.0], '2021-02-19 14:25:00': [19.8, 19.91, 19.8, 19.89, 135800.0], '2021-02-19 14:30:00': [19.88, 19.95, 19.86, 19.88, 194300.0], '2021-02-19 14:35:00': [19.88, 19.9, 19.82, 19.9, 60300.0], '2021-02-19 14:40:00': [19.87, 19.93, 19.84, 19.9, 72400.0], '2021-02-19 14:45:00': [19.91, 19.93, 19.84, 19.88, 55100.0], '2021-02-19 14:50:00': [19.9, 19.92, 19.86, 19.9, 66400.0], '2021-02-19 14:55:00': [19.9, 19.93, 19.87, 19.9, 145400.0], '2021-02-19 15:00:00': [19.89, 19.92, 19.86, 19.9, 108700.0]}, '']
d2 = [{'2021-02-19 09:35:00': [2.79, 2.8, 2.78, 2.79, 429300.0], '2021-02-19 09:40:00': [2.8, 2.8, 2.79, 2.8, 65300.0], '2021-02-19 09:45:00': [2.8, 2.81, 2.79, 2.8, 293900.0], '2021-02-19 09:50:00': [2.8, 2.81, 2.8, 2.8, 277100.0], '2021-02-19 09:55:00': [2.8, 2.81, 2.79, 2.81, 310500.0], '2021-02-19 10:00:00': [2.8, 2.81, 2.8, 2.8, 131400.0], '2021-02-19 10:05:00': [2.81, 2.81, 2.8, 2.8, 39500.0], '2021-02-19 10:10:00': [2.8, 2.81, 2.8, 2.81, 37200.0], '2021-02-19 10:15:00': [2.8, 2.81, 2.79, 2.8, 802800.0], '2021-02-19 10:20:00': [2.8, 2.81, 2.79, 2.81, 276200.0], '2021-02-19 10:25:00': [2.81, 2.81, 2.8, 2.81, 95000.0], '2021-02-19 10:30:00': [2.81, 2.81, 2.8, 2.81, 119000.0], '2021-02-19 10:35:00': [2.8, 2.81, 2.8, 2.8, 172600.0], '2021-02-19 10:40:00': [2.81, 2.81, 2.8, 2.81, 61700.0], '2021-02-19 10:45:00': [2.81, 2.81, 2.8, 2.81, 54100.0], '2021-02-19 10:50:00': [2.81, 2.81, 2.8, 2.81, 131900.0], '2021-02-19 10:55:00': [2.81, 2.81, 2.8, 2.81, 45900.0], '2021-02-19 11:00:00': [2.81, 2.81, 2.81, 2.81, 48300.0], '2021-02-19 11:05:00': [2.81, 2.82, 2.81, 2.81, 408400.0], '2021-02-19 11:10:00': [2.82, 2.82, 2.81, 2.82, 30200.0], '2021-02-19 11:15:00': [2.82, 2.83, 2.82, 2.82, 457800.0], '2021-02-19 11:20:00': [2.83, 2.83, 2.82, 2.82, 390300.0], '2021-02-19 11:25:00': [2.82, 2.82, 2.82, 2.82, 46400.0], '2021-02-19 11:30:00': [2.82, 2.82, 2.82, 2.82, 160200.0], '2021-02-19 13:05:00': [2.82, 2.83, 2.82, 2.82, 453800.0], '2021-02-19 13:10:00': [2.82, 2.83, 2.81, 2.82, 163800.0], '2021-02-19 13:15:00': [2.82, 2.83, 2.81, 2.82, 189500.0], '2021-02-19 13:20:00': [2.83, 2.83, 2.82, 2.82, 177000.0], '2021-02-19 13:25:00': [2.83, 2.83, 2.82, 2.82, 121700.0], '2021-02-19 13:30:00': [2.83, 2.83, 2.83, 2.83, 126500.0], '2021-02-19 13:35:00': [2.83, 2.83, 2.82, 2.82, 184900.0], '2021-02-19 13:40:00': [2.83, 2.84, 2.83, 2.84, 327300.0], '2021-02-19 13:45:00': [2.84, 2.84, 2.83, 2.84, 130800.0], '2021-02-19 13:50:00': [2.84, 2.84, 2.83, 2.84, 359800.0], '2021-02-19 13:55:00': [2.84, 2.84, 2.83, 2.84, 107800.0], '2021-02-19 14:00:00': [2.84, 2.84, 2.83, 2.84, 98900.0], '2021-02-19 14:05:00': [2.83, 2.84, 2.83, 2.84, 66000.0], '2021-02-19 14:10:00': [2.84, 2.84, 2.84, 2.84, 222200.0], '2021-02-19 14:15:00': [2.84, 2.85, 2.84, 2.85, 604600.0], '2021-02-19 14:20:00': [2.85, 2.87, 2.85, 2.86, 650300.0], '2021-02-19 14:25:00': [2.86, 2.88, 2.86, 2.88, 1190000.0], '2021-02-19 14:30:00': [2.87, 2.9, 2.87, 2.89, 1421300.0], '2021-02-19 14:35:00': [2.88, 2.88, 2.87, 2.87, 247500.0], '2021-02-19 14:40:00': [2.87, 2.88, 2.87, 2.87, 194600.0], '2021-02-19 14:45:00': [2.87, 2.87, 2.86, 2.86, 193300.0], '2021-02-19 14:50:00': [2.87, 2.87, 2.86, 2.86, 95500.0], '2021-02-19 14:55:00': [2.86, 2.87, 2.86, 2.87, 115700.0], '2021-02-19 15:00:00': [2.86, 2.87, 2.86, 2.87, 197400.0]}, '']
d1 =d1[0]
d2 = d2[0]

pd.DataFrame.from_dict(d1, orient='index', columns=['Open', 'High', 'Low', 'Close', 'Volume'])




import talib 
def MACD(prices, fastperiod=12, slowperiod=26, signalperiod=9):
    '''
    参数设置:
        fastperiod = 12
        slowperiod = 26
        signalperiod = 9
    返回: macd - signal
    '''
    macd, signal, hist = talib.MACD(prices, 
                                    fastperiod=fastperiod, 
                                    slowperiod=slowperiod, 
                                    signalperiod=signalperiod)
    return macd[-1] - signal[-1]





import pandas as pd

# 假设有 100 个 DataFrame，每个包含一个 "close" 列
df_list = [pd.DataFrame({'close': range(i, i + 5)}) for i in range(1, 201, 2)]

# 合并所有 DataFrame
merged_df = pd.concat([df['close'] for df in df_list], axis=1, keys=[f'df{i}_close' for i in range(1, len(df_list)+1)])

# 计算 "close" 列的平均值
average_close = merged_df.mean(axis=1)

from matplotlib import pyplot as plt
x = pd.concat ([((1 + symbol.orderbook.value.pct_change().fillna(0)).cumprod() ) for symbol in self.symbols], axis=1, keys=[symbol.name for symbol in self.symbols])
y = pd.concat ([((1 + symbol.orderbook.price.pct_change().fillna(0)).cumprod() ) for symbol in self.symbols], axis=1, keys=[symbol.name for symbol in self.symbols])
x_mean =  x.mean(axis=1)
y_mean =  y.mean(axis=1)

#最大值 最小值 最后值 index
max_x_mean_index =  x_mean.idxmax()
min_x_mean_index =  x_mean.idxmin()
latest_x_mean_index =  x_mean.index[-1]

#收益价格 
plt.plot(x.index, x_mean,lw=1, label='Strategy Returns', color='green')
# 标的价格
plt.plot(y.index, y_mean,lw=1, label='Underlying Returns', color='blue')
# plt.plot(y.index, y_mean,lw=1, label='price', color='blue')
plt.legend(loc="upper left")
#最大值
plt.scatter(max_x_mean_index, x_mean[max_x_mean_index], color='red', marker='d', s=100)
plt.text(max_x_mean_index,  x_mean[max_x_mean_index], f'Max: {x_mean[max_x_mean_index]:.4f}', color='red',verticalalignment='bottom', horizontalalignment='left')

# 最小值
plt.scatter(min_x_mean_index, x_mean[min_x_mean_index], color='green', marker='d', s=100)
plt.text(min_x_mean_index,  x_mean[min_x_mean_index], f'Min: {x_mean[min_x_mean_index]:.4f}',color='green', verticalalignment='bottom', horizontalalignment='left')

# 最后值
plt.scatter(latest_x_mean_index, x_mean[latest_x_mean_index], color='black', marker='o', s=100)
plt.text(latest_x_mean_index,  x_mean[latest_x_mean_index], f'final: {x_mean[latest_x_mean_index]:.4f}',color='black', verticalalignment='bottom', horizontalalignment='left')


#最大回撤
peak_x  = x_mean.cummax()
x_max_drawdown = ((peak_x - x_mean) / peak_x)
x_max_drawdown_index = x_max_drawdown.idxmax()
plt.scatter(x_max_drawdown_index, x_mean.min(), color='black', marker='d')
plt.text(x_max_drawdown_index, x_mean.min(), f'Max Drawdown: - {x_max_drawdown[x_max_drawdown_index]:.4%}', color='black', verticalalignment='bottom', horizontalalignment='left')

plt.title("Strategy Returns Table")
# plt.legend(loc="upper left")
plt.show()


